#include <Arduino.h>
#include <lib/Adafruit_NeoPixel/Adafruit_NeoPixel.h>
#include "Projects/Grid.h"
#include "Lib/Gradient.h"

// Create an instance of the project
Project *myProject = new Grid(4, NEO_GRB, NEO_KHZ800, 16, 8);

// Create an instance of the Adafruit NeoPixel library with project values
Adafruit_NeoPixel strip(myProject->getNumLeds(),
                        myProject->getDataPin(),
                        myProject->getColourType() + myProject->getOtherData());

void setup() {
  Serial.begin(115200);
  randomSeed(analogRead(0));
  myProject->init();
  // Initialize all pixels to 'off'
  strip.begin();
  strip.clear();
  strip.show();
  strip.setBrightness(100);
  myProject->setEffect("Ripple Effect");
}

unsigned long lastColSwitch = 0;
unsigned long lastEffectSwitch = 0;

void loop() {
  Gradient::gradientSwitchLoop();
  myProject->loop();
  myProject->drawLeds(&strip);
  delay(1);

  // Switch the effect every 20s to a random one
  if (millis() - lastEffectSwitch > 20000) {
    lastEffectSwitch = millis();
    Serial.print("Switching effect to ");
    std::string  effect = myProject->getEffectNames()[random(0, myProject->getEffectNames().size())];
    Serial.println(effect.c_str());
    myProject->setEffect(effect);
  }

  // Switch the colour every 15s
  if (millis() - lastColSwitch > 15000) {
    lastColSwitch = millis();
    // create a random new gradient
    // pick 2 random colours from the HSV wheel where the saturation and value are 255
    uint32_t col1 = Adafruit_NeoPixel::ColorHSV(random(0, 255), 255, 255);
    uint32_t col2 = Adafruit_NeoPixel::ColorHSV(random(0, 255), 255, 255);

    // decompose into RGBs
    uint8_t r1 = random(0, 255);
    uint8_t g1 = random(0, 255);
    uint8_t b1 = random(0, 255);

    uint8_t r2 = random(0, 255);
    uint8_t g2 = random(0, 255);
    uint8_t b2 = random(0, 255);
    // create a new gradient
    auto *initialStops = new GradientStop[3]{
            {0,   r1, g1, b1, 0},
            {128, r2, g2, b2, 0},
            {255, r1, g1, b1, 0},
    };
    auto *initialGradient = new Gradient(initialStops, 3, false);
    Gradient::setCurrentGradient(initialGradient);

  }
}


